@model  Vlast.Gamific.Web.Services.Engine.DTO.EpisodeEngineDTO

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<script type="text/javascript">
    $("#Implantacao").addClass("active");
</script>

@using GridMvc.Html

<div>
    <!-- header -->
    <div class="pageheader">
        <h2><i class="fa fa-building"></i> Implantação </h2>
    </div>
    <!-- /header -->
    <!-- content -->
    <div class="main implantacao">
        <div class="row">
            <div class="col-md-12">
                <div id="rootwizard" class="panel">
                    <div class="panel-body nopadding color rounded-top-corners">
                        <ul>
                            <li><a href="#tab1" data-toggle="tab">Campanhas</a></li>
                            <li><a href="#tab2" data-toggle="tab">Funções</a></li>
                            <li><a href="#tab3" data-toggle="tab">Jogadores</a></li>
                            <li><a href="#tab4" data-toggle="tab">Equipes</a></li>
                            <li><a href="#tab5" data-toggle="tab">Métricas</a></li>
                            <li><a href="#tab6" data-toggle="tab">Metas</a></li>
                        </ul>
                    </div>
                    <div class="panel-body">
                        <div class="col-xs-12">
                            <div id="bar" class="progress progress-striped active">
                                <div class="progress-bar progress-bar-cyan animate-progress-bar"></div>
                            </div>
                        </div>
                            <div class="tab-content">
                                <div class="tab-pane" id="tab1">
                                    
                                    <form method="post" action="/admin/implantacao/salvarCampanha" class="episode">
                                        <div id="episode">
                                        <span style="display:none">
                                            @Html.HiddenFor(model => model.Id);
                                            @Html.HiddenFor(model => model.Active);
                                            @Html.HiddenFor(model => model.initDate);
                                            @Html.HiddenFor(model => model.finishDate);
                                            @Html.HiddenFor(model => model.GameId);
                                            @Html.HiddenFor(model => model.DaysOfWeek);
                                            @Html.HiddenFor(model => model.ScoreByResult);

                                        </span>
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            @Html.ValidationSummary(true, "", new { @id = "validation-data", @class = "text-danger-summary" })
                                        </div>
                                        <div class="col-sm-12 col-md-6 modal-div">
                                            <div class="form-group">

                                                @Html.LabelFor(model => model.Name, "Nome*:", new { @class = "control-label" })
                                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @tabindex = "1" } })

                                                @Html.ValidationMessageFor(model => model.Name, "O campo Nome da Campanha é obrigatório.", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-sm-10 col-md-6 modal-div">
                                            <div class="form-group">

                                                @Html.LabelFor(model => model.XpReward, "Quantidade de XP*:", new { @class = "control-label" })
                                                @Html.EditorFor(model => model.XpReward, new { htmlAttributes = new { @class = "form-control", @tabindex = "2" } })
                                                @Html.ValidationMessageFor(model => model.XpReward, "O campo Xp é obrigatório.", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-sm-12 col-md-6 modal-div nopadding">
                                            <div class="form-group">

                                                @Html.LabelFor(model => model.initDateAux, "Data inicial:", new { @class = "control-label" })

                                                @Html.EditorFor(model => model.initDateAux, new { htmlAttributes = new { @class = "form-control", @tabindex = "3" } })

                                                @Html.ValidationMessageFor(model => model.initDateAux, "O campo Data inicial é obrigatório.", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-sm-12 col-md-6 modal-div">
                                            <div class="form-group">

                                                @Html.LabelFor(model => model.finishDateAux, "Data final:", new { @class = "control-label" })

                                                @Html.EditorFor(model => model.finishDateAux, new { htmlAttributes = new { @class = "form-control", @tabindex = "4" } })

                                                @Html.ValidationMessageFor(model => model.finishDateAux, "O campo Data final é obrigatório.", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-sm-12 col-md-12 modal-div">
                                            <div class="form-group">

                                                <label class="control-label">
                                                    Enviar email:
                                                    @Html.CheckBoxFor(model => model.sendEmail, Model.sendEmail)
                                                </label>
                                                <div id="daysOfWeek">
                                                    <input type="checkbox" id="mon" name="mon" value="mon" onchange="CheckChange('mon')">Segunda
                                                    <input type="checkbox" id="tue" name="tue" value="tue" onchange="CheckChange('tue')">Terça
                                                    <input type="checkbox" id="wed" name="wed" value="wed" onchange="CheckChange('wed')">Quarta
                                                    <input type="checkbox" id="thu" name="thu" value="thu" onchange="CheckChange('thu')">Quinta
                                                    <input type="checkbox" id="fri" name="fri" value="fri" onchange="CheckChange('fri')">Sexta
                                                    <input type="checkbox" id="sat" name="sat" value="sat" onchange="CheckChange('sat')">Sábado
                                                    <input type="checkbox" id="sun" name="sun" value="sun" onchange="CheckChange('sun')">Domingo
                                                </div>
                                            </div>
                                        </div>

                                        <div class="border-top color white rounded-bottom-corners nopadding">
                                            <div class="col-xs-12 buttons">

                                                <!-- <li class="previous"><a href="javascript:;"><i class="fa fa-arrow-left fa-lg"></i> Voltar</a></li>-->
                                                <!-- <li class="next"><a href="javascript:;">Avançar <i class="fa fa-arrow-right fa-lg"></i></a></li>-->
                                                <!--<li class="next finish" style="display:none; cursor:pointer" onclick="">
                        <a>
                            <i class="fa fa-check fa-lg"></i> Finaliza
                        </a>
                    </li>-->
                                                <button type="button" class="btn previous"><i class="fa fa-arrow-left fa-lg"></i> Voltar</button>
                                                <button type="button" class="btn next">Avançar <i class="fa fa-arrow-right fa-lg"></i></button>
                                                <button type="submit" class="btn btn-cadastrar">Cadastrar</button>
                                            </div>
                                        </div>
                                            </div>
                                    </form>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="tile transparent">
                                                <div class="tile-body color rounded-corners">
                                                    <div class="">
                                                        <table id="episodeDataTable" class="table table-striped" cellspacing="0" width="100%">
                                                            <thead>
                                                                <tr>
                                                                    <th>Nome</th>
                                                                    <th>Data Inicial</th>
                                                                    <th>Data Final</th>
                                                                    <th>XP</th>
                                                                    <th>Campanha Ativa</th>
                                                                    <th>Email Ativo</th>
                                                                   <!-- <th>Ações</th>-->

                                                                </tr>
                                                            </thead>
                                                            <tbody></tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                                <div class="tile-footer border-top color white rounded-bottom-corners nopadding">

                                                </div>
                                            </div>
                                        </div>
                                    </div>



                                </div>
                                <div class="tab-pane" id="tab2">
                                    
                                    <form method="post" action="/admin/implantacao/salvarFuncao" class="funcao">
                                        <div id="funcao">
                                            <span style="display:none">
                                                @Html.HiddenFor(model => model.Id);
                                                @Html.HiddenFor(model => model.ExternalFirmId);
                                            </span>
                                            @Html.AntiForgeryToken()
                                            <div class="row">
                                                @Html.ValidationSummary(true, "", new { @id = "validation-data", @class = "text-danger-summary" })
                                            </div>
                                            <div class="col-sm-10 col-md-6 modal-div">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.TypeName, "Nome da função*:", new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.TypeName, new { htmlAttributes = new { @class = "form-control", @tabindex = "1" } })
                                                    @Html.ValidationMessageFor(model => model.TypeName, "O campo Nome da Função é obrigatório.", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-10 col-md-6 modal-div">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ProfileName, "Perfil*:", new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.ProfileName, (IEnumerable<SelectListItem>)ViewBag.Profiles, "Informe o perfil do tipo", new { @class = "form-control", @tabindex = "2" })
                                                    @Html.ValidationMessageFor(model => model.ProfileName, "O campo Perfil é obrigatório.", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="border-top color white rounded-bottom-corners nopadding">
                                                <div class="col-xs-12 buttons">
                                                    <button type="button" class="btn previous"><i class="fa fa-arrow-left fa-lg"></i> Voltar</button>
                                                    <button type="button" class="btn next">Avançar <i class="fa fa-arrow-right fa-lg"></i></button>
                                                    <button type="submit" class="btn btn-cadastrar">Cadastrar</button>
                                                </div>
                                            </div>
                                            </div>
                                        </form>
                                        </div>
                                        <div class="tab-pane" id="tab3">

                                        </div>
                                        <div class="tab-pane" id="tab4">


                                        </div>
                                        <div class="tab-pane" id="tab5">


                                        </div>
                                        <div class="tab-pane" id="tab6">


                                        </div>
                                </div>

                    </div>

                    
                </div>
            </div>
        </div>
    </div>
</div>
<script src="/Content/Js/app/implantacao.js" charset="iso-8859-1"></script>
<script>

    var currentDate = new Date();
    $('#initDateAux').datepicker({
        language: 'pt-BR',
        changeMonth: true,
        changeYear: true,
        showOtherMonths: true,
        autoclose: true,
        selectOtherMonths: true,
        selectOtherYears: true,
        changeYear: true,
        orientation: 'bottom'
    });
</script>

<script>
    var currentDate = new Date();
    $('#finishDateAux').datepicker({
        language: 'pt-BR',
        changeMonth: true,
        changeYear: true,
        autoclose: true,
        showOtherMonths: true,
        selectOtherMonths: true,
        selectOtherYears: true,
        changeYear: true,
        orientation: 'bottom'
    });
</script>


<script>
    $(function () {

        //initialize form wizard
        $('#rootwizard').bootstrapWizard({

            'tabClass': 'nav nav-tabs tabdrop',
            onTabShow: function (tab, navigation, index) {
                var $total = navigation.find('li').not('.tabdrop').length;
                var $current = index + 1;
                var $percent = ($current / $total) * 100;
                $('#rootwizard').find('#bar .progress-bar').css({ width: $percent + '%' });

                // If it's the last tab then hide the last button and show the finish instead
                if ($current >= $total) {
                    $('#rootwizard').find('.buttons .next').hide();
                    $('#rootwizard').find('.buttons .finish').show();
                    $('#rootwizard').find('.buttons .finish').removeClass('disabled');
                } else {
                    $('#rootwizard').find('.buttons .next').show();
                    $('#rootwizard').find('.buttons .finish').hide();
                }
            },
            onNext: function (tab, navigation, index) {

                var form = $('.form' + index)

                form.parsley('validate');

                tab.addClass('success');

            },

            onTabClick: function (tab, navigation, index) {

                var form = $('.form' + (index + 1))

                form.parsley('validate');

                tab.addClass('success');

            },
            nextSelector: '.buttons .next',
            previousSelector: '.buttons .previous'

        });
        // Initialize tabDrop
        $('.tabdrop').tabdrop({ text: '<i class="fa fa-th-list"></i>' });


    })
</script>
<script>

    $(document).ready(function () {
        if (!$('#sendEmail').is(':checked')) {
            $('#daysOfWeek').hide();
        } else {
            var daysOfWeek = $('#DaysOfWeek').val().split(',');

            daysOfWeek.forEach(function (value, key) {
                $('#' + value).prop('checked', true);
            });
        }

        
    });

    $('#sendEmail').change(function () {
        if ($('#sendEmail').is(':checked')) {
            $('#daysOfWeek').show();
            var daysOfWeek = $('#DaysOfWeek').val().split(',');

            daysOfWeek.forEach(function (value, key) {
                $('#' + value).prop('checked', true);
            });
        }
        else {
            $('#daysOfWeek').hide();
        }
    });

</script>

<script>
    var expanded = false;

    function showCheckboxes() {
        var checkboxes = document.getElementById("checkboxes");
        if (!expanded) {
            checkboxes.style.display = "block";
            expanded = true;
        } else {
            checkboxes.style.display = "none";
            expanded = false;
        }
    }

    function checkBoxChange(checkBox) {
        if ($(checkBox).val() == "true")
            $(checkBox).val("false");
        else
            $(checkBox).val("true");
    }

</script>

<script>
    $('#iconView').append("<i class='fa " + $('#Icon').val() + " fa-3x'></i>");

    $('#Icon').change(function () {
        $('#iconView').empty().append("<i class='fa " + $(this).val() + " fa-3x'></i>");
    });
</script>


<style>
    .multiselect {
        width: 200px;
    }

    .selectBox {
        position: relative;
    }

        .selectBox select {
            width: 100%;
            font-weight: bold;
            border-radius: 5px;
        }

    .overSelect {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
    }

    #checkboxes {
        display: none;
        border: 1px #dadada solid;
    }

        #checkboxes label {
            display: block;
        }

            #checkboxes label:hover {
                background-color: #1e90ff;
            }
</style>
<script>
    window.addEventListener("submit", function (e) {
        var form = e.target;

        if (form.dataset.ajax) {
            e.preventDefault();
            e.stopImmediatePropagation();
            var xhr = new XMLHttpRequest();
            xhr.open(form.method, form.action, true);
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    if (form.dataset.ajaxUpdate) {
                        var updateTarget = document.querySelector(form.dataset.ajaxUpdate);
                        if (updateTarget) {
                            updateTarget.innerHTML = xhr.responseText;
                        }
                    }
                }
            };
            xhr.send(new FormData(form));
        }
        onSucessSaveEpisode();

    }, true);
</script>