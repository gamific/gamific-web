@model  Vlast.Gamific.Web.Services.Engine.DTO.EpisodeEngineDTO

@using (Ajax.BeginForm("Save", "Episode", new AjaxOptions { OnSuccess = "onSucessSaveEpisode", OnFailure = "onFailureSaveEpisode", UpdateTargetId = "modal-panel" }))
{
    <span style="display:none">
        @Html.HiddenFor(model => model.Id);
        @Html.HiddenFor(model => model.Active);
        @Html.HiddenFor(model => model.initDate );
        @Html.HiddenFor(model => model.finishDate );
        @Html.HiddenFor(model => model.GameId);
        @Html.HiddenFor(model => model.DaysOfWeek);
        @Html.HiddenFor(model => model.ScoreByResult);
        @Html.HiddenFor(model => model.XpReward);
    </span>


    <div id="modal-panel">
        <div class="modal-dialog modal-xlg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" title="Fechar" id="btn_close_modal" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="criaNovaEpisode">Criar nova Campanha</h4>
                </div>
                <div class="modal-body" id="edit-modal-body">
                    @Html.AntiForgeryToken()
                    <div class="row">
                        @Html.ValidationSummary(true, "", new { @id = "validation-data", @class = "text-danger-summary" })
                    </div>
                    <div class="form-group">
                        <div class="col-sm-10 col-md-12 modal-div">
                            @Html.LabelFor(model => model.Name, "Nome*:", new { @class = "col-sm-12 control-label" })
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @tabindex = "1" } })
                            @Html.ValidationMessageFor(model => model.Name, "O campo Nome da Campanha é obrigatório.", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <div class="col-sm-10 col-md-12 modal-div">
                            @Html.LabelFor(model => model.XpReward, "Quantidade de XP*:", new { @class = "col-sm-12 control-label" })
                            @Html.EditorFor(model => model.XpReward, new { htmlAttributes = new { @class = "form-control", @tabindex = "3" } })
                            @Html.ValidationMessageFor(model => model.XpReward, "O campo Xp é obrigatório.", new { @class = "text-danger" })
                        </div>
                    </div>
                    

                    <div class="form-group">
                        <div class="col-sm-10 col-md-6 modal-div">
                            @Html.LabelFor(model => model.initDateAux, "Data inicial do periodo:", new { @class = "col-sm-12 control-label" })
                            @Html.EditorFor(model => model.initDateAux, new { htmlAttributes = new { @class = "form-control", @tabindex = "4" } })
                            @Html.ValidationMessageFor(model => model.initDateAux, "O campo Data inicial do periodo é obrigatório.", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-10 col-md-6 modal-div">
                            @Html.LabelFor(model => model.finishDateAux, "Data final do periodo:", new { @class = "col-sm-12 control-label" })
                            @Html.EditorFor(model => model.finishDateAux, new { htmlAttributes = new { @class = "form-control", @tabindex = "4" } })
                            @Html.ValidationMessageFor(model => model.finishDateAux, "O campo Data final do periodo é obrigatório.", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-10 col-md-12 modal-div">
                            <label style="font-size:larger;">
                                Enviar email:
                                @Html.CheckBoxFor(model => model.sendEmail, Model.sendEmail)
                            </label>
                            <div id="daysOfWeek">
                                <input type="checkbox" id="mon" name="mon" value="mon" onchange="CheckChange('mon')">Segunda 
                                <input type="checkbox" id="tue" name="tue" value="tue" onchange="CheckChange('tue')">Terça 
                                <input type="checkbox" id="wed" name="wed" value="wed" onchange="CheckChange('wed')">Quarta 
                                <input type="checkbox" id="thu" name="thu" value="thu" onchange="CheckChange('thu')">Quinta 
                                <input type="checkbox" id="fri" name="fri" value="fri" onchange="CheckChange('fri')">Sexta 
                                <input type="checkbox" id="sat" name="sat" value="sat" onchange="CheckChange('sat')">Sábado 
                                <input type="checkbox" id="sun" name="sun" value="sun" onchange="CheckChange('sun')">Domingo 
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Cadastrar</button>
                </div>
            </div>
        </div>
    </div>
}

<script>

    var currentDate = new Date();
        $('#initDateAux').datepicker({
            language: 'pt-BR',
            changeMonth: true,
            changeYear: true,
            showOtherMonths: true,
            autoclose:true,
            selectOtherMonths: true,
            selectOtherYears: true,
            changeYear: true,
            orientation: 'bottom'
        });
        //$("#initDateAux").datepicker("setDate", currentDate);
</script>

<script>
    var currentDate = new Date();
    $('#finishDateAux').datepicker({
        language: 'pt-BR',
        changeMonth: true,
        changeYear: true,
        autoclose:true,
        showOtherMonths: true,
        selectOtherMonths: true,
        selectOtherYears: true,
        changeYear: true,
        orientation: 'bottom'
    });
    //$("#finishDateAux").datepicker("setDate", currentDate);
</script>

<script>

    $(document).ready(function () {
        if (!$('#sendEmail').is(':checked')) {
            $('#daysOfWeek').hide();
        }

        var daysOfWeek = $('#DaysOfWeek').val().split(',');

        daysOfWeek.forEach(function (value, key) {
            $('#' + value).prop('checked', true);
        });
    });

    $('#sendEmail').change(function () {
        if ($('#sendEmail').is(':checked')) {
            $('#daysOfWeek').show();
        }
        else {
            $('#daysOfWeek').hide();
        }
    });

</script>
<script>
    window.addEventListener("submit", function (e) {
        var form = e.target;
       
            if (form.dataset.ajax) {
                e.preventDefault();
                e.stopImmediatePropagation();
                var xhr = new XMLHttpRequest();
                xhr.open(form.method, form.action, false);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        if (form.dataset.ajaxUpdate) {
                            var updateTarget = document.querySelector(form.dataset.ajaxUpdate);
                            if (updateTarget) {
                                updateTarget.innerHTML = xhr.responseText;
                            }
                        }
                    }
                };
                xhr.send(new FormData(form));
            }
            onSucessSaveEpisode();
        
    }, true);
</script>
